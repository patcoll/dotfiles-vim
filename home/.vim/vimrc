set nocompatible      " Use vim, no vi defaults
set encoding=utf-8    " Set default encoding to UTF-8
filetype off

" set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'scrooloose/syntastic'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'terryma/vim-multiple-cursors'
" Plug 'scrooloose/nerdcommenter'
Plug 'tomtom/tcomment_vim'
Plug 'itspriddle/ZoomWin'
Plug 'ervandew/supertab'
Plug 'tpope/vim-repeat'
Plug 'godlygeek/tabular'
Plug 'terryma/vim-expand-region'

" snipmate
Plug 'tomtom/tlib_vim'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'

Plug 'bling/vim-airline'
Plug 'majutsushi/tagbar'
Plug 'christoomey/vim-tmux-navigator'
Plug 'bronson/vim-trailing-whitespace'
" Plug 'tpope/vim-surround'

" File formats
Plug 'ap/vim-css-color', { 'for': 'css' }
Plug 'elzr/vim-json', { 'for': 'json' }
Plug 'othree/html5.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'chrisbra/csv.vim', { 'for': 'csv' }
Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'hail2u/vim-css3-syntax', { 'for': 'css' }
" Plug 'vim-scripts/Arduino-syntax-file'
" Plug 'guns/vim-clojure-static'
" Plug 'kchmck/vim-coffee-script'
Plug 'tpope/vim-cucumber', { 'for': 'cucumber' }
Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }
Plug 'jimenezrick/vimerl', { 'for': 'erlang' }

" syntax, indent, and filetype plugin files for git, gitcommit, gitconfig,
" gitrebase, and gitsendemail
Plug 'tpope/vim-git'

Plug 'jnwhiteh/vim-golang', { 'for': 'go' }
" Plug 'tpope/vim-haml'
" Plug 'wlangstroth/vim-haskell'
Plug 'pangloss/vim-javascript'
let g:javascript_plugin_jsdoc = 1
Plug 'tpope/vim-liquid'
Plug 'tpope/vim-markdown', { 'for': 'markdown' }

" Plug 'dsawardekar/ember.vim'
Plug 'mustache/vim-mustache-handlebars'
Plug 'joukevandermaas/vim-ember-hbs'
Plug 'dustinfarris/vim-htmlbars-inline-syntax'

Plug 'mmalecki/vim-node.js'
Plug 'ajf/puppet-vim'
Plug 'tpope/vim-rails'
Plug 'skwp/vim-rspec'
Plug 'vim-ruby/vim-ruby'
Plug 'cakebaker/scss-syntax.vim'
Plug 'StanAngeloff/php.vim', { 'for': 'php' }
Plug 'zah/nim.vim'
Plug 'wting/rust.vim'
" Plug 'tpope/vim-speeddating'
" Plug 'jceb/vim-orgmode'
" Plug 'ryanss/vim-hackernews'
" Plug 'Matt-Deacalion/vim-systemd-syntax'
" Plug 'markcornick/vim-bats'
" Plug 'cespare/vim-toml'
" Plug 'jimmyhchan/dustjs.vim'
Plug 'evidens/vim-twig'
" Plug 'mileszs/ack.vim'
" Plug 'Chiel92/vim-autoformat'
" Plug 'jaxbot/semantic-highlight.vim'
" Plug 'yalesov/vim-emblem'

" {{{ Colorschemes
Plug 'chriskempson/base16-vim'
Plug 'vim-scripts/twilight256.vim'
" }}}

" typescript
Plug 'leafgarland/typescript-vim'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'Quramy/tsuquyomi'
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi'] " You shouldn't use 'tsc' checker.

" Pick one of these two...
" Plug 'mxw/vim-jsx'
Plug 'maxmellon/vim-jsx-pretty'
let g:vim_jsx_pretty_highlight_close_tag = 1

Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
let g:prettier#exec_cmd_async = 1

" Plug 'mattn/emmet-vim'
Plug 'machakann/vim-swap'

" Initialize plugin system
call plug#end()

" load the plugin and indent settings for the detected filetype
filetype plugin indent on    " required

" To ignore plugin indent changes, instead use:
"filetype plugin on

let mapleader = ","
let maplocalleader = ","

set iskeyword=@,48-57,_,192-255,$ ",-

" Shortcut for commenting.
nmap <leader>/ :TComment<cr>j
vmap <leader>/ :TComment<cr>

nmap <leader>P :Prettier<cr>

" ZoomWin configuration
map <Leader><Leader> :ZoomWin<CR>

" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways

" Searching
nnoremap / /\v
vnoremap / /\v

" Single-key repeat last macro
" nnoremap \ @@

set background=dark
" colorscheme MyTwilight
colorscheme twilight256
" colorscheme base16-default
" colorscheme base16-twilight
" colorscheme base16-ocean
" colorscheme distinguished
" hi Comment ctermbg=NONE ctermfg=238

if has("gui_running")
  colorscheme MyTwilight
  set guifont=Monaco:h14
endif

" map semicolon to colon for less typing when we want to save
nnoremap ; :
vnoremap ; :

" Shows autocomplete menu for commands
set wildmenu

"Completion list settings
" First time tab is hit, complete the longest common string
" Second time tab is hit, list all possible matches
set wildmode=longest,list

" Make vertical split bar line character be a single space.
set fillchars+=vert:\|

" leader-space will toggle hlsearch
nnoremap <leader><space> :set hlsearch! hlsearch?<CR>

" leader-n will toggle nerdtree
nnoremap <leader>n :NERDTreeToggle<CR>
if !exists("NERDTreeIgnore")
  let NERDTreeIgnore=[]
  let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.o$', '\~$']
endif
let NERDTreeIgnore+=['^\.DS_Store$']
let NERDTreeIgnore+=['^__pycache__$']

" shortcuts for common soft tab sizes
nnoremap <leader>2 :se ts=2 sts=2 sw=2 et ai nosi nocin<CR>
nnoremap <leader>4 :se ts=4 sts=4 sw=4 et ai nosi nocin<CR>

" toggle line numbers
nnoremap <leader>N :set number! number?<CR>

" toggle paste mode
nnoremap <leader>p :set paste! paste?<CR>

" map tab to %, which jumps to the matching brace
nnoremap <tab> %
vnoremap <tab> %

" numbered tab shortcuts
nnoremap 1t 1gt
nnoremap 2t 2gt
nnoremap 3t 3gt
nnoremap 4t 4gt
nnoremap 5t 5gt
nnoremap 6t 6gt
nnoremap 7t 7gt
nnoremap 8t 8gt
nnoremap 9t 9gt

" no spaces when using shift-j to join lines together
set nojoinspaces

let g:syntastic_mode_map={ 'mode': 'active',
                     \ 'active_filetypes': [],
                     \ 'passive_filetypes': ['html'] }

let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_warning_symbol='?>'

if isdirectory(resolve(expand(argv(0))))
  bd
  autocmd VimEnter * exe "cd" resolve(expand(argv(0)))
  " autocmd VimEnter * NERDTree
endif

au BufNewFile,BufRead *.php setlocal expandtab shiftwidth=4 softtabstop=4

" Put at the very end of your .vimrc file.

function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END

nmap =j :%!python -m json.tool<CR>

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" unlet g:ctrlp_custom_ignore
" unlet g:ctrlp_user_command
" set your own custom ignore settings
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn$\|bower_components$\|tmp$\|log$\|dist$\|node_modules$\|\.\?gems\?$',
    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

let ruby_no_expensive = 1
let ruby_minlines = 100

" let g:formatterpath = ['/usr/local/bin']
" vnoremap <leader>a :Autoformat<CR>
" vnoremap <leader>a :Autoformat<CR>
" noremap <leader>a :Autoformat<CR>

let g:airline_section_b = '%{fugitive#head()}'
autocmd BufRead,BufNewFile *.js HighlightInlineHbs
