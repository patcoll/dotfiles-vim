set nocompatible      " Use vim, no vi defaults
set encoding=utf-8    " Set default encoding to UTF-8
filetype off

" Turn off background erase
let &t_ut=''

" set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/plugged')

Plug 'thaerkh/vim-workspace'
let g:workspace_session_directory = $HOME . '/.vim/sessions/'
let g:workspace_autosave = 0
let g:workspace_persist_undo_history = 1
let g:workspace_undodir=$HOME . '/.vim/runtime/undodir/'

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'godlygeek/tabular'

Plug 'embear/vim-localvimrc'
let g:localvimrc_persistent = 2
let g:localvimrc_persistence_file = $HOME . '/.vim/runtime/.localvimrc_persistent'

" Syntax checkers
Plug 'dense-analysis/ale'
" \   'css': ['prettier'],
let g:ale_linters = {
\   'javascriptreact': ['eslint'],
\   'javascript': ['eslint'],
\}
let g:ale_fixers = {
\   'javascript': ['prettier', 'eslint'],
\   'rust': ['rustfmt'],
\   'elixir': ['mix_format'],
\}
let g:ale_lint_on_text_changed = 'never'
nnoremap =f :ALEFix<cr>

Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-abolish'

Plug 'vim-airline/vim-airline'
Plug 'christoomey/vim-tmux-navigator'
Plug 'bronson/vim-trailing-whitespace'

Plug 'danro/rename.vim'

" File formats
Plug 'ap/vim-css-color', { 'for': 'css' }
Plug 'elzr/vim-json', { 'for': 'json' }
Plug 'othree/html5.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'chrisbra/csv.vim', { 'for': 'csv' }
Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'hail2u/vim-css3-syntax', { 'for': 'css' }
Plug 'tpope/vim-cucumber', { 'for': 'cucumber' }
Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }
Plug 'jimenezrick/vimerl', { 'for': 'erlang' }

" syntax, indent, and filetype plugin files for git, gitcommit, gitconfig,
" gitrebase, and gitsendemail
Plug 'tpope/vim-git'

Plug 'jnwhiteh/vim-golang', { 'for': 'go' }
Plug 'wlangstroth/vim-haskell', { 'for': 'haskell' }
Plug 'pangloss/vim-javascript'
Plug 'plasticboy/vim-markdown'

" Ember
Plug 'mustache/vim-mustache-handlebars'
Plug 'joukevandermaas/vim-ember-hbs'
Plug 'dustinfarris/vim-htmlbars-inline-syntax'

Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
Plug 'StanAngeloff/php.vim', { 'for': 'php' }
Plug 'zah/nim.vim', { 'for': 'nim' }
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'cespare/vim-toml', { 'for': 'toml' }

" {{{ Colorschemes
Plug 'vim-scripts/twilight256.vim'
" }}}

" typescript
Plug 'leafgarland/typescript-vim'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'Quramy/tsuquyomi'
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi'] " You shouldn't use 'tsc' checker.

" GraphQL
Plug 'jparise/vim-graphql'

" Pick one of these two...
Plug 'maxmellon/vim-jsx-pretty'
let g:vim_jsx_pretty_highlight_close_tag = 1

" Initialize plugin system
call plug#end()

" load the plugin and indent settings for the detected filetype
filetype plugin indent on    " required

let mapleader = ","
let maplocalleader = ","

set iskeyword=@,48-57,_,192-255,$ ",-

" Shortcut for commenting.
nmap <leader>/ :TComment<cr>j
vmap <leader>/ :TComment<cr>

" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
""" Don't automatically make windows equal sizes.
" set noequalalways

" Searching
nnoremap / /\v
vnoremap / /\v

colorscheme twilight256

" an inactive tab
hi TabLine      ctermfg=255 ctermbg=42     cterm=NONE
" the selected tab
hi TabLineSel   ctermfg=17  ctermbg=190  cterm=NONE
" the unused portion of the tab line (not enough tabs)
hi TabLineFill  ctermfg=255  ctermbg=238     cterm=NONE

if has("gui_running")
  colorscheme MyTwilight
  set guifont=Monaco:h14
endif

" map semicolon to colon for less typing
nnoremap ; :
vnoremap ; :

" Shows autocomplete menu for commands
set wildmenu

"Completion list settings
" First time tab is hit, complete the longest common string
" Second time tab is hit, list all possible matches
set wildmode=longest,list

" Make vertical split bar line character be a single space.
set fillchars+=vert:\|

nnoremap K :set hlsearch! hlsearch?<CR>

" leader-space will toggle hlsearch
nnoremap <leader><space> :set hlsearch! hlsearch?<CR>

" leader-n will toggle nerdtree
nnoremap <leader>n :NERDTreeToggle<CR>
if !exists("NERDTreeIgnore")
  let NERDTreeIgnore=[]
  let NERDTreeIgnore=['node_modules', '\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.o$', '\~$']
endif
let NERDTreeIgnore+=['^\.DS_Store$']
let NERDTreeIgnore+=['^__pycache__$']

" shortcuts for common soft tab sizes
nnoremap <leader>2 :se ts=2 sts=2 sw=2 et ai nosi nocin<CR>
nnoremap <leader>4 :se ts=4 sts=4 sw=4 et ai nosi nocin<CR>

" toggle line numbers
nnoremap <leader>N :set number! number?<CR>

" toggle paste mode
nnoremap <leader>p :set paste! paste?<CR>

" close tab
nnoremap <leader>t :tabc<CR>
nnoremap <C-w> :tabc<CR>

" map tab to %, which jumps to the matching brace
nnoremap <tab> %
vnoremap <tab> %

nnoremap <C-t> :tabnew<CR>

" browse to tab to the left or right
nnoremap <M-[> gT
nnoremap <M-]> gt

" browse to numbered tab
nnoremap <M-1> 1gt
nnoremap <M-2> 2gt
nnoremap <M-3> 3gt
nnoremap <M-4> 4gt
nnoremap <M-5> 5gt
nnoremap <M-6> 6gt
nnoremap <M-7> 7gt
nnoremap <M-8> 8gt
nnoremap <M-9> 9gt

if isdirectory(resolve(expand(argv(0))))
  bd
  autocmd VimEnter * exe "cd" resolve(expand(argv(0)))
  " autocmd VimEnter * NERDTree
endif

au BufNewFile,BufRead *.php setlocal expandtab shiftwidth=4 softtabstop=4

nmap =j :%!python -m json.tool<CR>

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Ruby options
let ruby_no_expensive = 1
let ruby_minlines = 100

" Adjust viewports to the same size
map <Leader>= <C-w>=

" Go files
au BufRead,BufNewFile *.go se noet ci pi sts=0 sw=2 ts=2

" dotenv files
au BufRead,BufNewFile .env set filetype=sh
au BufRead,BufNewFile .env.* set filetype=sh

" Bundler Brewfile
au BufNewFile,BufRead Brewfile set filetype=ruby

" Ignore files
au BufNewFile,BufRead .*ignore set filetype=conf
